<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DataSource 등록 -->	
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		id="realDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="c##food" />
		<property name="password" value="food" />
	</bean>
	
	<!-- 전달값이 적용되어 실행되는 query 문과 resultSet 결과값을 
		로그로 출력되게 하려면, dataSource 에 로그 연결 설정을 함
	 -->
	<!-- pom.xml 의 log4jdbc-remix 관련 dataSource 처리 -->
	<bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="realDataSource" />
		<property name="logFormatter">
			<bean
				class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
			<property name="loggingType" value="MULTI_LINE" />
			<property name="sqlPrefix" value="[SQL] " />
			</bean>
		</property>
	</bean>

	<!-- Spring과 MyBatis 연동 설정 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean"
		id="sqlSession">
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />		
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- dao 에서 사용할 MyBatis 객체 생성 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSession"></constructor-arg>
	</bean>

	<!-- 트랜잭션 관리 설정 -->
	<bean
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		id="transactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- service 에서 필요한 시점에서 commit | rollback 이 구동되게 aop 설정 처리	 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true"
				rollback-for="Exception" />
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<aop:config proxy-target-class="true">
		<aop:pointcut
			expression="execution(* com.circle.foodstagram..*Impl.*(..))"
			id="serviceMethod" />
		<aop:advisor advice-ref="txAdvice" id="transactionAdvisor"
			pointcut-ref="serviceMethod" />
	</aop:config>
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="iceca159@gmail.com" />
		<property name="password" value="gtuwltnqaebuefow" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
				<prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
			</props>
		</property>
	</bean>
	
	
</beans>
